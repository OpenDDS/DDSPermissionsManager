// Copyright 2023 DDS Permissions Manager Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// buildscript block allow for building docker images on Mac M1. See https://github.com/micronaut-projects/micronaut-gradle-plugin/issues/363
buildscript {
    dependencies {
        classpath("com.github.docker-java:docker-java:3.2.14")
        classpath("com.github.docker-java:docker-java-transport-httpclient5:3.2.14")
    }
}
plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("jacoco")
    id("com.gorylenko.gradle-git-properties") version "2.4.1"
    id("io.micronaut.application") version "4.0.0"
    id("io.micronaut.test-resources") version "4.0.0"
    id("io.micronaut.aot") version "4.0.0"
}

version = "0.1"
group = "io.unityfoundation"


repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")
    annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
    annotationProcessor("io.micronaut:micronaut-graal")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.problem:micronaut-problem-json")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("io.micronaut:micronaut-websocket")
    runtimeOnly("ch.qos.logback:logback-classic")


    implementation("org.bouncycastle:bcprov-jdk18on:1.72")
    implementation("org.bouncycastle:bcpkix-jdk18on:1.72")
//    implementation("org.bouncycastle:bcmail-jdk18on:1.72")
    implementation("org.bouncycastle:bcjmail-jdk18on:1.72")
    implementation("io.micronaut.email:micronaut-email-javamail")
    implementation("jakarta.xml.bind:jakarta.xml.bind-api:4.0.1")

    implementation("io.micronaut.views:micronaut-views-freemarker")

    implementation("io.micronaut.gcp:micronaut-gcp-secret-manager")
    implementation("com.google.cloud:google-cloud-secretmanager:2.12.0")
    runtimeOnly("org.yaml:snakeyaml")
//    nativeImageCompileOnly("com.google.cloud:native-image-support")

    String databaseSelection = System.getenv("DPM_DATABASE_DEPENDENCY")
    String mnEnvs = System.getenv("MICRONAUT_ENVIRONMENTS")
    if (databaseSelection != null) {
        databaseSelection.split(',').each {part ->
            runtimeOnly(part)
        }
    }
    if (mnEnvs != null) {
        def envList = mnEnvs.split(',').each {it.trim()}.collect()
        if (envList.contains("h2")) {
            runtimeOnly("com.h2database:h2")
        }
    }
}


application {
    mainClass.set("io.unityfoundation.dds.permissions.manager.RunApplication")
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("io.unityfoundation.dds.permissions.manager.*")
    }
    // see https://micronaut-projects.github.io/micronaut-gradle-plugin/latest/#_configuring_the_test_resources_plugin
    testResources {
        enabled = true
    }
}

tasks.withType(JavaCompile) {
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=rapidoc.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop'
}

tasks.register('copyClientResources', Copy) {
    dependsOn ':frontend:build'
    from "${project(':frontend').projectDir}/build"
    into "${project(':app').buildDir}/resources/main/public"
}

tasks.named("dockerfile") {
    def arch = System.getProperty("os.arch")

    if (arch == "aarch64") {
        baseImage = "arm64v8/eclipse-temurin:11-jre"
    } else {
        baseImage = "eclipse-temurin:11-jre"
    }
}

processResources {
    dependsOn 'copyClientResources'
}
